name: Plan and Deploy

on:
  push:
    branches:
      - 'main'

jobs:
  terraform-plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
    environment: "AWS General"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22'
    
      - name: Install dependencies
        run: npm ci

      - name: Lint npm
        run: npm run lint
      
      - name: Build
        run: npm run build

      - name: Upload web assets
        uses: actions/upload-artifact@v4
        with:
          name: out
          path: out

      - name: Upload sns publish lambda
        uses: actions/upload-artifact@v4
        with:
          name: sns_publish_lambda
          path: sns_publish_lambda

      - name: Terraform fmt
        run: terraform -chdir=terraform fmt -check

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform refresh
        run: terraform -chdir=terraform refresh

      - name: Terraform Plan
        run: terraform -chdir=terraform plan -out=plan.tfplan
      
      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: plan
          path: terraform/plan.tfplan

  terraform-apply:
    name: 'Terraform Apply'
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment: "prod"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22'
        
      - name: Install dependencies
        run: npm ci

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: plan
          path: terraform/plan
  
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: out
          path: ../out
      
      - name: Download sns publish lambda
        uses: actions/download-artifact@v4
        with:
          name: sns_publish_lambda
          path: sns_publish_lambda

      - name: Terraform Refresh
        run: terraform -chdir=terraform refresh

      - name: Debug step
        run: |
          pwd
          ls
          echo "===================="
          ls terraform
          echo "===================="
          ls terraform/plan

      - name: Terraform Apply
        run: terraform -chdir=terraform apply "plan/plan.tfplan"


  cloudfront-invalidation:
      name: Invalidate CloudFront Distribution
      needs: terraform-apply
      runs-on: ubuntu-latest
      environment: "AWS General"
      steps:        
        - name: Checkout
          uses: actions/checkout@v4
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

        - name: Setup Node.js environment
          uses: actions/setup-node@v4
          with:
            node-version: '22'
        
        - name: Install dependencies
          run: npm ci

        - name: Invalidate CloudFront cache
          run: |
            aws cloudfront create-invalidation --distribution-id $CF_DISTRIBUTION_ID --paths "/*"
          env:
            CF_DISTRIBUTION_ID: ${{ vars.CF_DISTRIBUTION_ID }}